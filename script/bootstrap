#!/usr/bin/env bash
#
# bootstrap installs things.

# dir of script
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}"   )" && pwd   )
# dotfiles root is one up
DOTFILES_ROOT=$(realpath "$DIR/..")
cd $DOTFILES_ROOT

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_oh_my_zsh () {
  if ! [ -d "$DOTFILES_ROOT/oh-my-zsh" ]
  then
	  info 'checking out oh-my-zsh'
	  git clone git@github.com:robbyrussell/oh-my-zsh.git
  fi

  # Manually create symlink for core oh-my-zsh
  if ! [ -h ~/.oh-my-zsh ]
  then
  	ln -s "$DOTFILES_ROOT/oh-my-zsh" ~/.oh-my-zsh
  fi
}


link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

# straight dotfiles
# 1. straight symlink to home folder - no subfolder
#    e.g. foo/bar.symlink will produce a symlink ~/.bar
# 2. symlink to folder inside home folder - create sub-folder, optional with _ prefix
#    e.g. foo/bar/baz.symlink will produce a symlink ~/bar/baz
#    e.g. foo/_bar/baz.symlink will produce a symlink ~/.bar/baz
install_dotfiles () {
  echo 'installing dotfiles'

  OVERWRITE_ALL=false
  BACKUP_ALL=false
  SKIP_ALL=false

  for SOURCE in `find $DOTFILES_ROOT/ -name \*.symlink`
  do
    FOLDER=$(realpath $(dirname $SOURCE))
    PARENT_FOLDER=$(realpath $(dirname $(dirname $SOURCE)))

    if [ "$PARENT_FOLDER" = "$DOTFILES_ROOT" ]; then
      DEST_FILENAME="$HOME/.`basename \"${SOURCE%.*}\"`"
    else
      FOLDER_NAME=$(basename $FOLDER)
      DEST_FOLDER="$HOME/${FOLDER_NAME/_/.}"
      mkdir -vp $DEST_FOLDER
      DEST_FILENAME="$DEST_FOLDER/`basename \"${SOURCE%.*}\"`"
    fi

    if [ -f $DEST_FILENAME ] || [ -d $DEST_FILENAME ]
    then

      OVERWRITE=false
      BACKUP=false
      SKIP=false

      if [ "$OVERWRITE_ALL" == "false" ] && [ "$BACKUP_ALL" == "false" ] && [ "$SKIP_ALL" == "false" ]
      then
        user "File already exists: '$DEST_FILENAME', what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 ACTION

        case "$ACTION" in
          o )
            OVERWRITE=true;;
          O )
            OVERWRITE_ALL=true;;
          b )
            BACKUP=true;;
          B )
            BACKUP_ALL=true;;
          s )
            SKIP=true;;
          S )
            SKIP_ALL=true;;
          * )
            ;;
        esac
      fi

      if [ "$OVERWRITE" == "true" ] || [ "$OVERWRITE_ALL" == "true" ]
      then
        rm -rf $DEST_FILENAME
        success "removed $DEST_FILENAME"
      fi

      if [ "$BACKUP" == "true" ] || [ "$BACKUP_ALL" == "true" ]
      then
        mv $DEST_FILENAME $DEST_FILENAME\.backup
        success "moved $DEST_FILENAME to $DEST_FILENAME.backup"
      fi

      if [ "$SKIP" == "false" ] && [ "$SKIP_ALL" == "false" ]
      then
        link_files $SOURCE $DEST_FILENAME
      else
        success "skipped $SOURCE -> $DEST_FILENAME"
      fi

    else
      link_files $SOURCE $DEST_FILENAME
    fi

  done
}

install_xdg_config () {
  echo 'installing xdg_config dotfiles'

  OVERWRITE_ALL=false
  BACKUP_ALL=false
  SKIP_ALL=false

  for path in `find $DOTFILES_ROOT/ -maxdepth 2 -name xdg_config`
  do
    SOURCE=$(readlink -f $path)
    xdg_folder_name=$(basename $(dirname $SOURCE))
    DEST="$HOME/.config/$xdg_folder_name"

    if [ -d $DEST ]
    then

      OVERWRITE=false
      BACKUP=false
      SKIP=false

      if [ "$OVERWRITE_ALL" == "false" ] && [ "$BACKUP_ALL" == "false" ] && [ "$SKIP_ALL" == "false" ]
      then
        user "Folder already exists: $DEST, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 ACTION

        case "$ACTION" in
          o )
            OVERWRITE=true;;
          O )
            OVERWRITE_ALL=true;;
          b )
            BACKUP=true;;
          B )
            BACKUP_ALL=true;;
          s )
            SKIP=true;;
          S )
            SKIP_ALL=true;;
          * )
            ;;
        esac
      fi

      if [ "$OVERWRITE" == "true" ] || [ "$OVERWRITE_ALL" == "true" ]
      then
        rm -rf $DEST
        success "removed $DEST"
      fi

      if [ "$BACKUP" == "true" ] || [ "$BACKUP_ALL" == "true" ]
      then
        mkdir $DEST\.backup
        cp -r $DEST/* $DEST\.backup
        rm -rf $DEST
        success "moved $DEST to $DEST.backup"
      fi

      if [ "$SKIP" == "false" ] && [ "$SKIP_ALL" == "false" ]
      then
        link_files $SOURCE $DEST
      else
        success "skipped $SOURCE -> $DEST"
      fi

    else
      link_files $SOURCE $DEST
    fi

  done
}

fix_permissions () {
  for FILE in `cat .gitattributes | sed '/^[[:space:]]*$/d' | cut -f1 -d" "`; do
    echo "Setting mode 600 on $FILE"
    chmod 600 $FILE
  done
}

install_xsession () {
  HOSTNAME=$(hostname)

  TMP_FILENAME="/tmp/i3-${HOSTNAME}.desktop"
  DEST_FILENAME="/usr/share/xsessions/i3-${HOSTNAME}.desktop"

  if ! [ -a $DEST_FILENAME ]
  then
    echo "Creating i3 xsession file for host $HOSTNAME"
    cat << EOF > $TMP_FILENAME
[Desktop Entry]
Name=i3 (${HOSTNAME})
Comment=improved dynamic tiling window manager
Exec=i3 -c /home/collin/.config/i3/config-${HOSTNAME}
TryExec=i3
Type=Application
X-LightDM-DesktopName=i3 (${HOSTNAME})
DesktopNames=i3
Keywords=tiling;wm;windowmanager;window;manager;
EOF

    echo "Moving '$TMP_FILENAME' to /usr/share/xsessions (needs sudo)"
    sudo mv $TMP_FILENAME $DEST_FILENAME
  fi
}

install_desktop_files () {
  ln -sf $DOTFILES_ROOT/desktop_files $HOME/.local/share/applications/
}

setup_oh_my_zsh
install_dotfiles
install_xdg_config
install_xsession
install_desktop_files
fix_permissions

echo ''
echo '  All installed!'
