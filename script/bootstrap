#!/usr/bin/env bash
#
# bootstrap installs things.

# dir of script
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}"   )" && pwd   )
# dotfiles root is one up
DOTFILES_ROOT="$DIR/.."
cd $DOTFILES_ROOT

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

setup_oh_my_zsh () {
  if ! [ -d "$DOTFILES_ROOT/oh-my-zsh" ]
  then
	  info 'checking out oh-my-zsh'
	  git clone git@github.com:robbyrussell/oh-my-zsh.git
  fi

  # Manually create symlink for core oh-my-zsh
  ln -s "$DOTFILES_ROOT/oh-my-zsh" ~/.oh-my-zsh
}


link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT/ -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
setup_oh_my_zsh
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

info "installing vim-plug"
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

if [ ! -a ~/.vim/db_ext.conf ]; then
	info "creating shell ~/.vim/dbext.conf"
	echo "
\" dbext options
let g:dbext_default_type   = 'PGSQL'			\" Default db type
let g:dbext_default_user   = 'mcrtdbms'			\" Default username
let g:dbext_default_buffer_lines = 20
let g:dbext_default_prompt_for_parameters=0     \" Turn off parameter prompt
let g:dbext_suppress_version_warning=1
let g:dbext_rows_affected = 1
let g:dbext_default_use_sep_result_buffer = 1	\" Each buffer has its own results window
let g:dbext_default_display_cmd_line = 0 		\" Do NOT display cmd as well
let g:dbext_default_history_file = '\$HOME/.dbext_sql_history.txt'
let g:dbext_default_profile='intouch_devel'

let g:dbext_default_profile_local = 'type=PGSQL:user=mcrtdbms:dbname=intouch_db:host=127.0.0.1'
" > ~/.vim/db_ext.conf
fi

if [ ! -a ~/.pgpass ]; then
	info "creating shell ~/.pgpass"
	echo "127.0.0.1:5432:*:username:password" > ~/.pgpass
	chmod 600 ~/.pgpass
fi

echo ''
echo '  All installed!'
