" Don't worry about compatibility with Vi
set nocompatible

filetype off

" let Vundle manage Vundle, required!
set rtp+=~/.vim/bundle/vundle
call vundle#begin()
Plugin 'gmarik/vundle'

" ==========================
" PLUGINS
" ==========================
" ui related
Plugin 'bling/vim-airline'
Plugin 'edkolev/tmuxline.vim'
Plugin 'airblade/vim-gitgutter'
" syntax
Plugin 'plasticboy/vim-markdown'
"
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-dispatch'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'Raimondi/delimitMate'
Plugin 'majutsushi/tagbar'
Plugin 'gorkunov/smartpairs.vim' 
	"Plugin 'gcmt/wildfire.vim' 
	"Plugin 'terryma/vim-expand-region'
Plugin 'SirVer/ultisnips'							" code snippets
Plugin 'honza/vim-snippets' 						" snippets for ultisnips
" completion and searching
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'Shougo/neocomplete.vim'
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim'
"Plugin 'ctrlpvim/ctrlp.vim' 						" Active fork of plugin 'kien/ctrlp.vim'
Plugin 'JazzCore/ctrlp-cmatcher' 					" better matching algorithm for ctrl-p
Plugin 'rking/ag.vim'
" database
Plugin 'collinpeters/dbext.vim'
Plugin 'krisajenkins/vim-postgresql-syntax'
" window control
Plugin 'christoomey/vim-tmux-navigator'
" JavaScript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'elzr/vim-json'
Plugin 'scrooloose/syntastic'

Plugin 'Align'
Plugin 'SQLComplete.vim'
" color schemes 
Plugin 'wesgibbs/vim-irblack'
Plugin 'nanotech/jellybeans.vim'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'noahfrederick/vim-hemisu'
"Plugin 'vim-scripts/xoria256.vim'
"Plugin 'vim-scripts/peaksea'
"Plugin 'vim-scripts/mayansmoke'
"Plugin 'therubymug/vim-pyte'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required!

" ==========================
" UI SETUP
" ==========================
" colorscheme ir_black
syntax on " Syntax highlighting on
set encoding=utf-8
set t_Co=256 
set background=dark
"if has('gui_running')
"	set background=light
"else
"	set background=dark
"endif

colorscheme jellybeans
" let g:jellybeans_overrides = {
" \    'Normal': { 'guibg': '222222',
" \               'ctermbg': ''},
" \    'LineNr': { 'guibg': '222222',
" \               'ctermbg': ''},
" \}

" cursor lines
set cursorline
set cursorcolumn
hi CursorLine guibg=Grey11 ctermbg=235 		" highlight bg color of current line
hi CursorColumn guibg=Grey11 ctermbg=235	" highlight cursor

" ==========================
" CONFIGURATION
" ==========================

" Jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

let mapleader = "\<Space>" 				" Remap leader to comma
nnoremap <Leader>o :CtrlP<CR> 			" <Space>o to open a new file:
nnoremap <Leader>w :w<CR> 				" <Space>w to save file (a lot faster than :w<Enter>):
" Copy & paste to system clipboard with <Space>p and <Space>y:
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader><Leader> V 				" Enter visual mode with <space><space>
map <Cr> <Plug>(expand_region_expand) 	" Enter for expand region

inoremap jj <ESC> 						" jj is the same as escape in edit mode (killer!!)

" the ';' is the same as ':'  i.e. use ;w to save the file (no need for shift)
"noremap ; :

" Clear the search. No more typing '/asdfawdsf' to clear the search
nmap <silent> ,/ :nohlsearch<CR>

" Wrapped lines goes down/up to next row, rather than next line in file (you've fooled me for the last time Vim!!!)
nnoremap j gj
nnoremap k gk

" visual shifting (does not exit Visual mode after shift)
vnoremap < <gv
vnoremap > >gv

" sudo write
ca w!! w !sudo tee >/dev/null "%"

" Options, options, options
set showcmd                    " Show (partial) command in status line
set showmatch                  " Highlight matching brackets
set ignorecase                 " Do case insensitive matching
set smartcase                  " Do smart case matching
set incsearch                  " Incremental search (find as you type)
set autowrite                  " Automatically save before commands like :next and :make
set hidden                     " Hide buffers when they are abandoned
"set mouse=a                    " Enable mouse usage (all modes) in terminals
set wildignore+=*.class        " Ignore these files
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " command <Tab> completion, list matches, then longest common part, then all.
"set wildmode=longest:full,full
set tabstop=4                  " Tab stop of 4 characters
set shiftwidth=4               " Number of spaces to use for each step of (auto)indent
set nobackup                   " Don't make backup files
set autoindent                 " Automatic indents
set nowrap                     " Don't wrap by default
set hlsearch                   " highlight search matches
set scrolloff=3                " Have 3 lines of offset (or buffer) when scrolling
set number                     " Show current line number
set relativenumber             " Show relative line numbers
set formatoptions=croql        " Format options
set pastetoggle=<F2>           " Handle the paste toggle when pasting code
set showtabline=2              " Show the tab line if there are two or more tabs
set autochdir                  " Change the working directory to that of the current file
set splitbelow 				   " split below
set splitright 				   " vertical split right
set lazyredraw                 " do not update screen while executing macros

if has('cmdline_info')
	set ruler                  	" show the ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
	set showcmd                	" show partial commands in status line and selected characters/lines in visual mode
endif

" Set font for GUI vims
if has('gui_running')
	set linespace=0                " No extra spaces between rows

	let os = substitute(system('uname'), "\n", "", "")
	if os == "Windows"
		" Do Windows specific stuff.
		set gfn=Consolas:h10:cANSI
	elseif os == "Linux"
		" Do Linux-specific stuff.
		" set gfn=Ubuntu\ Mono\ 11
		set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 13
	endif
endif

" When in insert mode, turn off cursorline
:autocmd InsertEnter,InsertLeave * set cul!

" ==========================
" PLUGIN CONFIGURATION
" ==========================

" Turn off quote concealing on JSON
let g:vim_json_syntax_conceal = 0

" NerdTree
":nmap <silent> <F7> :NERDTreeToggle<CR> " Toggle the NerdTree on F7
map <silent> <F7> :NERDTreeTabsToggle<CR>
nmap <leader>nt :NERDTreeFind<CR> 		" Select current file in NerdTree
let g:nerdtree_tabs_smart_startup_focus=2 " always focus file on vim start

" Ctags
set tags=./tags;/,$HOME/.vimtags 							" This will look in the current directory for 'tags', and work up the tree towards root until one is found.
"map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> " C-\ - Open the definition in a new tab
"map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>      " A-] - Open the definition in a vertical split

" TagBar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus=1

" Ctrl-P 
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.settings$\|\.metadata$\|target\|fckeditor',
	\ 'file': '\.class$\|\.exe$\|\.swp$\|\.so$\|\.dll$\|TEST.*.xml$\|\Test.txt$\|\.jasper$\|\.jrxml$\|\.swf$\|\.png$\|\.gif$\|\configs.xml$\|\link-report.xml$\|\.fla',
    \ }
let g:ctrlp_working_path_mode = 2

" completion configuration
" Supertab
"let g:SuperTabDefaultCompletionType = "<c-x><c-u>"
let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabClosePreviewOnPopupClose = 1 	" Automatically close the scratch window
" let g:neocomplete#enable_at_startup = 1
" Vim tab completion
set completeopt=menuone,longest,preview

" Eclim
" Pass to YouCompleteMe
let g:EclimCompletionMethod = 'omnifunc'
" LocateFile should search workspace
let g:EclimLocateFileScope = 'workspace'
" Fallback to 'ag' (silver searcher) for non-project files
let g:EclimLocateFileNonProjectScope = 'ag'

" vim-airline
set laststatus=2
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme = "laederon"
let g:airline#extensions#whitespace#checks = [ 'trailing' ]
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0

" Vim markdown
let g:vim_markdown_folding_disabled=1

" Ultisnips
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical" 		" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Postgres stuff
let g:sql_type_default = 'pgsql' " SQLComplete default type

source ~/.vim/db_ext.conf " Source external db_ext conf

" Highlight psql output via 'krisajenkins/vim-postgresql-syntax'
function! DBextPostResult(db_type, buf_nr)
	" If dealing with a Postgres database
	if a:db_type == 'PGSQL'
		set filetype=postgresql
	endif
endfunction

nmap <leader>x <Plug>(wildfire-quick-select)
